import { ArgType, NativeFunction } from '@tryforge/forgescript';
import { ForgeSocial } from '../../../';
import { handleGitHubError } from '../../../utils/errorHandler';

export enum LicenseTemplate {
  AFL_3_0 = 'afl-3.0',
  Apache_2_0 = 'apache-2.0',
  Artistic_2_0 = 'artistic-2.0',
  BSL_1_0 = 'bsl-1.0',
  BSD_2_Clause = 'bsd-2-clause',
  BSD_3_Clause = 'bsd-3-clause',
  CC0_1_0 = 'cc0-1.0',
  CDDL_1_0 = 'cddl-1.0',
  EPL_2_0 = 'epl-2.0',
  EPL_1_0 = 'epl-1.0',
  EUPL_1_1 = 'eupl-1.1',
  GPL_2_0 = 'gpl-2.0',
  GPL_3_0 = 'gpl-3.0',
  ISC = 'isc',
  LGPL_2_1 = 'lgpl-2.1',
  LGPL_3_0 = 'lgpl-3.0',
  MIT = 'mit',
  MPL_2_0 = 'mpl-2.0',
  OSL_3_0 = 'osl-3.0',
  OFL_1_1 = 'ofl-1.1',
  NCSA = 'ncsa',
  Unlicense = 'unlicense',
  Zlib = 'zlib',
}

export enum GitignoreTemplate {
  Actionscript = 'ActionScript',
  Ada = 'Ada',
  Agda = 'Agda',
  Android = 'Android',
  AppEngine = 'AppEngine',
  AppceleratorTitanium = 'AppceleratorTitanium',
  ArchLinuxPackages = 'ArchLinuxPackages',
  Autotools = 'Autotools',
  C = 'C',
  CPlusPlus = 'C++',
  CMake = 'CMake',
  CSharp = 'C#',
  CakePHP = 'CakePHP',
  ChefCookbook = 'ChefCookbook',
  Clojure = 'Clojure',
  CodeIgniter = 'CodeIgniter',
  CommonLisp = 'CommonLisp',
  Composer = 'Composer',
  Concrete5 = 'Concrete5',
  Coq = 'Coq',
  CraftCMS = 'CraftCMS',
  D = 'D',
  Dart = 'Dart',
  Delphi = 'Delphi',
  Drupal = 'Drupal',
  EPiServer = 'EPiServer',
  Eagle = 'Eagle',
  Elisp = 'Emacs',
  Elixir = 'Elixir',
  Elm = 'Elm',
  Erlang = 'Erlang',
  ExpressionEngine = 'ExpressionEngine',
  ExtJs = 'ExtJs',
  Fancy = 'Fancy',
  Finale = 'Finale',
  ForceDotCom = 'ForceDotCom',
  Fortran = 'Fortran',
  FuelPHP = 'FuelPHP',
  GWT = 'GWT',
  GitBook = 'GitBook',
  Go = 'Go',
  Godot = 'Godot',
  Gradle = 'Gradle',
  Grails = 'Grails',
  Haskell = 'Haskell',
  IGORPro = 'IGORPro',
  Idris = 'Idris',
  Java = 'Java',
  Jboss = 'Jboss',
  Jekyll = 'Jekyll',
  Joomla = 'Joomla',
  Julia = 'Julia',
  KiCad = 'KiCad',
  Kohana = 'Kohana',
  Kotlin = 'Kotlin',
  LabVIEW = 'LabVIEW',
  Laravel = 'Laravel',
  Leiningen = 'Leiningen',
  LemonStand = 'LemonStand',
  Lilypond = 'Lilypond',
  Lithium = 'Lithium',
  Lua = 'Lua',
  Magento = 'Magento',
  Maven = 'Maven',
  Mercury = 'Mercury',
  MetaProgrammingSystem = 'MetaProgrammingSystem',
  Nginx = 'Nginx',
  Node = 'Node',
  ObjectiveC = 'Objective-C',
  OCaml = 'OCaml',
  Opa = 'Opa',
  OpenCart = 'OpenCart',
  OracleForms = 'OracleForms',
  Packer = 'Packer',
  Perl = 'Perl',
  Perl6 = 'Perl6',
  Phalcon = 'Phalcon',
  PlayFramework = 'PlayFramework',
  Plone = 'Plone',
  Prestashop = 'Prestashop',
  Processing = 'Processing',
  Python = 'Python',
  Qooxdoo = 'Qooxdoo',
  Qt = 'Qt',
  R = 'R',
  Rails = 'Rails',
  Raku = 'Raku',
  RhodesRhomobile = 'RhodesRhomobile',
  ROS = 'ROS',
  Ruby = 'Ruby',
  Rust = 'Rust',
  Sass = 'Sass',
  Scala = 'Scala',
  Scheme = 'Scheme',
  SCons = 'SCons',
  Scrivener = 'Scrivener',
  Smalltalk = 'Smalltalk',
  SugarCRM = 'SugarCRM',
  Swift = 'Swift',
  Symfony = 'Symfony',
  SymphonyCMS = 'SymphonyCMS',
  Terraform = 'Terraform',
  TeX = 'TeX',
  Textpattern = 'Textpattern',
  TurboGears2 = 'TurboGears2',
  Typo3 = 'Typo3',
  Umbraco = 'Umbraco',
  Unity = 'Unity',
  UnrealEngine = 'UnrealEngine',
  VisualStudio = 'VisualStudio',
  VVVV = 'VVVV',
  Waf = 'Waf',
  WordPress = 'WordPress',
  Xojo = 'Xojo',
  Yeoman = 'Yeoman',
  Yii = 'Yii',
  ZendFramework = 'ZendFramework',
}

export default new NativeFunction({
  name: '$githubCreateRepoUser',
  description: 'Creates a new repository for the authenticated user',
  brackets: true,
  unwrap: true,
  args: [
    {
      name: 'name',
      description: 'Repository name',
      required: true,
      rest: false,
      type: ArgType.String,
    },
    {
      name: 'description',
      description: 'Repository description',
      required: false,
      rest: false,
      type: ArgType.String,
    },
    {
      name: 'homepage',
      description: 'Repository homepage URL',
      required: false,
      rest: false,
      type: ArgType.String,
    },
    {
      name: 'private',
      description: 'Whether the repository should be private',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
    {
      name: 'hasIssues',
      description: 'Enable issues for the repository',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
    {
      name: 'hasProjects',
      description: 'Enable projects for the repository',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
    {
      name: 'hasWiki',
      description: 'Enable wiki for the repository',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
    {
      name: 'autoInit',
      description: 'Initialize repository with a README',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
    {
      name: 'gitignoreTemplate',
      description: 'Git ignore template. If i am missing a template let me know',
      required: false,
      rest: false,
      type: ArgType.Enum,
      enum: GitignoreTemplate,
    },
    {
      name: 'licenseTemplate',
      description: 'License template. If i am missing a template let me know',
      required: false,
      rest: false,
      type: ArgType.Enum,
      enum: LicenseTemplate,
    },
    {
      name: 'allowSquashMerge',
      description: 'Allow squash merging',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
    {
      name: 'allowMergeCommit',
      description: 'Allow merge commits',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
    {
      name: 'allowRebaseMerge',
      description: 'Allow rebase merging',
      required: false,
      rest: false,
      type: ArgType.Boolean,
    },
  ],
  output: ArgType.Json,
  async execute(
    ctx,
    [
      name,
      description,
      homepage,
      isPrivate,
      hasIssues,
      hasProjects,
      hasWiki,
      autoInit,
      gitignoreTemplate,
      licenseTemplate,
      allowSquashMerge,
      allowMergeCommit,
      allowRebaseMerge,
    ],
  ) {
    const ext = ctx.client.getExtension('ForgeSocial') as ForgeSocial;
    const github = ext.github;
    if (!github) {
      return this.customError('GitHub client not initialized');
    }
    try {
      const result = await github.rest.repos.createForAuthenticatedUser({
        name,
        description: description || undefined,
        homepage: homepage || undefined,
        private: isPrivate || false,
        has_issues: hasIssues ?? true,
        has_projects: hasProjects ?? true,
        has_wiki: hasWiki ?? true,
        auto_init: autoInit || false,
        gitignore_template: gitignoreTemplate || undefined,
        license_template: licenseTemplate || undefined,
        allow_squash_merge: allowSquashMerge || false,
        allow_merge_commit: allowMergeCommit || false,
        allow_rebase_merge: allowRebaseMerge || false,
      });
      return this.success(JSON.stringify(result, undefined, 2));
    } catch (error) {
      return this.success(handleGitHubError(error));
    }
  },
});
